rename(score = DSQ_Calmness) %>%
add_column(scale = "DSQ_Calmness", .after = "VPNr")
DSQ_SocialResistance <- vorbefragung %>%
select(group, VPNr, DSQ_SocialResistance) %>%
rename(score = DSQ_SocialResistance) %>%
add_column(scale = "DSQ_SocialResistance", .after = "VPNr")
DSQ_Focus <- vorbefragung %>%
select(group, VPNr, DSQ_Focus) %>%
rename(score = DSQ_Focus) %>%
add_column(scale = "DSQ_Focus", .after = "VPNr")
DSQ_Planning <- vorbefragung %>%
select(group, VPNr, DSQ_Planning) %>%
rename(score = DSQ_Planning) %>%
add_column(scale = "DSQ_Planning", .after = "VPNr")
DSQ_Deviance <- vorbefragung %>%
select(group, VPNr, DSQ_Deviance) %>%
rename(score = DSQ_Deviance) %>%
add_column(scale = "DSQ_Deviance", .after = "VPNr")
## build subset ##
DSQ <- bind_rows(DSQ_Speed, DSQ_Calmness, DSQ_SocialResistance, DSQ_Focus, DSQ_Planning, DSQ_Deviance) %>%
mutate(scale = factor(scale, levels = c("DSQ_Speed", "DSQ_Calmness", "DSQ_SocialResistance", "DSQ_Focus", "DSQ_Planning", "DSQ_Deviance"), ordered = TRUE))
## lables ##
labels_DSQ = c("Speed", "Calmness", "Social Resistance",
"Focus", "Planning", "Deviance")
## basic plot ##
p <- ggplot(DSQ, aes(x=scale, y=score, fill=scale)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_x_discrete(labels = labels_DSQ) +
scale_y_continuous(limits = c(2,18), breaks = seq(2,18,2)) +
facet_wrap(~group) +
scale_fill_manual(values = c("#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE")) +
labs(y="Score", x="") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
legend.position = "none",
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.text.x=element_text(color = "black", size=9, angle=20, vjust=.88, hjust=0.8, face = "plain"),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain")) +
geom_segment(aes(x = 0.6, y = 18, xend = 1.4, yend = 18), linetype = 2) + # speed
geom_segment(aes(x = 0.6, y = 3, xend = 1.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 1.6, y = 18, xend = 2.4, yend = 18), linetype = 2) + # calmness
geom_segment(aes(x = 1.6, y = 3, xend = 2.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 2.6, y = 12, xend = 3.4, yend = 12), linetype = 2) + # social resistance
geom_segment(aes(x = 2.6, y = 2, xend = 3.4, yend = 2), linetype = 2) +
geom_segment(aes(x = 3.6, y = 18, xend = 4.4, yend = 18), linetype = 2) + # focus
geom_segment(aes(x = 3.6, y = 3, xend = 4.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 4.6, y = 12, xend = 5.4, yend = 12), linetype = 2) + # planning
geom_segment(aes(x = 4.6, y = 2, xend = 5.4, yend = 2), linetype = 2) +
geom_segment(aes(x = 5.6, y = 12, xend = 6.4, yend = 12), linetype = 2) + # deviance
geom_segment(aes(x = 5.6, y = 2, xend = 6.4, yend = 2), linetype = 2)
p
## basic plot ##
p <- ggplot(DSQ, aes(x=scale, y=score, fill=scale)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_x_discrete(labels = labels_DSQ) +
scale_y_continuous(limits = c(2,18), breaks = seq(2,18,2)) +
facet_wrap(~group) +
scale_fill_manual(values = c("#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE")) +
labs(y="Score", x="") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
legend.position = "none",
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.text.x=element_text(color = "black", size=9, angle=20, vjust=.88, hjust=0.8, face = "plain"),
axis.text.y=element_text(color = "black", size=9, face = "plain")) +
geom_segment(aes(x = 0.6, y = 18, xend = 1.4, yend = 18), linetype = 2) + # speed
geom_segment(aes(x = 0.6, y = 3, xend = 1.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 1.6, y = 18, xend = 2.4, yend = 18), linetype = 2) + # calmness
geom_segment(aes(x = 1.6, y = 3, xend = 2.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 2.6, y = 12, xend = 3.4, yend = 12), linetype = 2) + # social resistance
geom_segment(aes(x = 2.6, y = 2, xend = 3.4, yend = 2), linetype = 2) +
geom_segment(aes(x = 3.6, y = 18, xend = 4.4, yend = 18), linetype = 2) + # focus
geom_segment(aes(x = 3.6, y = 3, xend = 4.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 4.6, y = 12, xend = 5.4, yend = 12), linetype = 2) + # planning
geom_segment(aes(x = 4.6, y = 2, xend = 5.4, yend = 2), linetype = 2) +
geom_segment(aes(x = 5.6, y = 12, xend = 6.4, yend = 12), linetype = 2) + # deviance
geom_segment(aes(x = 5.6, y = 2, xend = 6.4, yend = 2), linetype = 2)
p
#### plot driver's license ####
plot_license <- ggplot(vorbefragung, aes(x = group, y=Fuehrerschein, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(1960,2020), breaks = seq(1960,2020,10)) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5", "#E7E6E6")) +
labs(y="Year - obtainment of driver's license") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_license
ggsave(filename = "data/results/figures/License.png", plot_license,
dpi = 500, width = 3, height = 3.5, units = "in", device='png', bg = "transparent")
#### plot age ####
plot_age <- ggplot(vorbefragung, aes(x = group, y=Alter, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(20,80), breaks = seq(20,80,10)) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5", "#E7E6E6")) +
labs(y="Age in years") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_age
ggsave(filename = "data/results/figures/Age.png", plot_age,
dpi = 500, width = 3, height = 3, units = "in", device='png', bg = "transparent")
#### plot ATI-S ####
plot_ATIS <- ggplot(vorbefragung, aes(x = group, y=ATIS, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(1,6), breaks = seq(1,6,1)) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5", "#E7E6E6")) +
labs(y="Score") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_ATIS
ggsave(filename = "data/results/figures/ATI-S.png", plot_ATIS,
dpi = 500, width = 3, height = 3, units = "in", device='png', bg = "transparent")
plot_monitoring <- ggplot(nachbefragung, aes(x = group, y=SubjUeberwachguete.1., fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,6), breaks = seq(0,6,1), labels = labels_monitoring) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5", "#E7E6E6")) +
labs(y="Response") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_monitoring
#### plot monitoring (subj. ueberwachungsguete) ####
labels_monitoring <- c("0 -\ninattentive", "1", "2", "3", "4", "5", "6 -\nalways\nattentive")
plot_monitoring <- ggplot(nachbefragung, aes(x = group, y=SubjUeberwachguete.1., fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,6), breaks = seq(0,6,1), labels = labels_monitoring) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5", "#E7E6E6")) +
labs(y="Response") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_monitoring
ggsave(filename = "data/results/figures/SubjMonitoringPerformance.png", plot_monitoring,
dpi = 500, width = 3.5, height = 3, units = "in", device='png', bg = "transparent")
#### plot system understanding ####
plot_SystemUnderstanding <- ggplot(nach_L2only, aes(x = group, y=100 * System_sum, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,50)) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5")) +
labs(y="Correct answers [%]") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_SystemUnderstanding
ggsave(filename = "data/results/figures/SystemUnderstanding.png", plot_SystemUnderstanding,
dpi = 500, width = 2.5, height = 3, units = "in", device='png', bg = "transparent")
#### preparations ####
rm(list = ls())
library(tidyverse)
library(skimr)
library(ggplot2)
library(dplyr)
library(rstatix)
library(skimr)
library(grid)
# library(ggpubr)
# library(reshape2)
# library(moments)
# library(ggpmisc)
setwd("~/R/VDA_FOT")
#### write function for summary ####
# adjusted from skim() function
mean_FOT = function(x) mean(x, na.rm = TRUE)
FOT_skim <- skim_with(numeric = sfl(mean = mean_FOT), append = FALSE)
#### notes on colors ####
#                 L2H-on RGB	  Hex	      L2H-off	RGB	  Hex	      L0/L1/neutral	RGB	Hex
#   Primärfarbe		255, 192, 0	  #FFC000		91, 155, 213	#5B9BD5		231, 230, 230	    #E7E6E6
# 1. Abstufung		255, 217, 102	#FFD966		155, 194, 230	#9BC2E6		208, 206, 206	    #D0CECE
# 2. Abstufung		255, 230, 153	#FFE699		189, 215, 238	#BDD7EE		174, 170, 170	    #AEAAAA
# 3. Abstufung		255, 242, 204	#FFF2CC		221, 235, 247	#DDEBF7		117, 113, 113	    #757171
# FOT colors:
# A L2H-off 			 "#9BC2E6"
# B L2H-off			  "#5B9BD5"
# A L2H-on (fc)		"#FFC000"
# A L2H-on (fam)	"#FFD966"
#
# Neutral/A:		"#E7E6E6"
# overall/B:		"#AEAAAA"
#### write function for summary stats ####
fun_mean <- function(x){ return(data.frame(y=mean(x),label=round(mean(x,na.rm=T), 2)))}
fun_median <- function(x){ return(data.frame(y=median(x),label=round(median(x,na.rm=T), 2)))}
#### import data ####
# Read in files
vorbefragung <- read.csv("data/preprocessed/vorbefragung_scores.csv", encoding = "UTF-8")
nachbefragung <- read.csv("data/preprocessed/nachbefragung_scores.csv", encoding = "UTF-8")
#### adjust data set for visualization ####
nachbefragung <- nachbefragung %>%
rename(group = X.U.FEFF.group) %>%
mutate(group = factor(group, levels = c("A", "B"), ordered = TRUE)) %>%
mutate(interval = ifelse(interval == "A_on_fc", "A L2H-on (fc)",
ifelse(interval == "A_on_fam", "A L2H-on (fam)",
ifelse(interval == "A_off", "A L2H-off",
ifelse(interval == "B_off", "B L2H-off", "OTHER"))))) %>%
mutate(interval = factor(interval, levels = c("A L2H-on (fc)", "A L2H-on (fam)", "A L2H-off", "B L2H-off"), ordered = TRUE)) %>%
# mutate(SubjUeberwachguete.1. = factor(SubjUeberwachguete.1., ordered = TRUE)) %>%
mutate(SubjEinflussSetting = factor(SubjEinflussSetting, ordered = TRUE)) %>%
mutate(Ranking = factor(Ranking, ordered = TRUE))
vorbefragung <- vorbefragung %>%
rename(group = X.U.FEFF.group) # %>%
# mutate(Fahrtfrequenz = factor(Fahrtfrequenz, levels = c("0", "1", "2", "3", "4"), ordered = TRUE)) %>%
# mutate(Fahrtstrecke = factor(Fahrtstrecke, levels = c("0", "1", "2", "3", "4", "5"), ordered = TRUE)) %>%
# mutate(FrequenzAutobahn = factor(FrequenzAutobahn, levels = c("0", "1", "2", "3", "4"), ordered = TRUE)) %>%
# mutate(StreckeAutobahn = factor(StreckeAutobahn, levels = c("0", "1", "2", "3", "4", "5"), ordered = TRUE)) %>%
# mutate(across(starts_with("KenntnisAS."), ~factor(., levels = c("0", "1", "2", "3"), ordered = TRUE)))
#### plot age ####
plot_age <- ggplot(vorbefragung, aes(x = group, y=Alter, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(20,80), breaks = seq(20,80,10)) +
scale_fill_manual(values = c("#E7E6E6","#AEAAAA")) +
labs(y="Age in years") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_age
ggsave(filename = "data/results/figures/new/Age_new.png", plot_age,
dpi = 500, width = 3, height = 3, units = "in", device='png', bg = "transparent")
#### plot driver's license ####
plot_license <- ggplot(vorbefragung, aes(x = group, y=Fuehrerschein, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(1960,2020), breaks = seq(1960,2020,10)) +
scale_fill_manual(values = c("#E7E6E6","#AEAAAA")) +
labs(y="Year - obtainment of driver's license") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_license
ggsave(filename = "data/results/figures/new/License_new.png", plot_license,
dpi = 500, width = 3, height = 4, units = "in", device='png', bg = "transparent")
#### plot ATI-S ####
plot_ATIS <- ggplot(vorbefragung, aes(x = group, y=ATIS, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(1,6), breaks = seq(1,6,1)) +
scale_fill_manual(values = c("#E7E6E6","#AEAAAA")) +
labs(y="Score") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_ATIS
ggsave(filename = "data/results/figures/new/ATI-S_new.png", plot_ATIS,
dpi = 500, width = 3, height = 3, units = "in", device='png', bg = "transparent")
#### plot system understanding ####
plot_SystemUnderstanding <- ggplot(nachbefragung, aes(x = interval, y=100 * System_sum, fill = interval)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,50)) +
scale_fill_manual(values = c("#FFC000","#FFD966", "#9BC2E6","#5B9BD5")) +
labs(y="Correct answers [%]") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_SystemUnderstanding
ggsave(filename = "data/results/figures/new/SystemUnderstanding_new.png", plot_SystemUnderstanding,
dpi = 500, width = 5, height = 3, units = "in", device='png', bg = "transparent")
plot_monitoring <- ggplot(nachbefragung, aes(x = interval, y=SubjUeberwachguete.1., fill = interval)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,6), breaks = seq(0,6,1), labels = labels_monitoring) +
scale_fill_manual(values = c("#FFC000","#FFD966", "#9BC2E6","#5B9BD5")) +
labs(y="Response", x="") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_monitoring
ggsave(filename = "data/results/figures/new/SubjMonitoringPerformance_new.png", plot_monitoring,
dpi = 500, width = 5, height = 3, units = "in", device='png', bg = "transparent")
#### plot monitoring (subj. ueberwachungsguete) ####
labels_monitoring <- c("0 -\ninattentive", "1", "2", "3", "4", "5", "6 -\nalways\nattentive")
plot_monitoring <- ggplot(nachbefragung, aes(x = interval, y=SubjUeberwachguete.1., fill = interval)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,6), breaks = seq(0,6,1), labels = labels_monitoring) +
scale_fill_manual(values = c("#FFC000","#FFD966", "#9BC2E6","#5B9BD5")) +
labs(y="Response", x="") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_monitoring
ggsave(filename = "data/results/figures/new/SubjMonitoringPerformance_new.png", plot_monitoring,
dpi = 500, width = 5, height = 3, units = "in", device='png', bg = "transparent")
#### plot ranking ####
labels_ranking <- c("H-on", "H-off")
nachbefragung_Aoff <- nachbefragung %>% # if
filter(interval == "A L2H-off")
plot_ranking <- ggplot(nachbefragung_Aoff, aes(x = Ranking)) +
geom_bar(fill = "#E7E6E6", color = "black", width = 0.8, size = 0.2) +
scale_x_discrete(limit = c("1", "2"), labels = labels_ranking) + # NA removed
ylim(0, 30) +
labs(y="n", x="") +
geom_text(size=3.2,stat='count',
aes(label=..count..),
position=position_dodge2(width=0.9, preserve=c("single")), vjust=-0.3) +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face="bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
legend.position = "none",
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
axis.text.x=element_text(color = "black", face="plain", size=9, angle=0, vjust=1),
axis.text.y=element_text(color = "black", face="plain", size=9))
plot_ranking
ggsave(filename = "data/results/figures/new/Ranking_new.png", plot_ranking,
dpi = 500, units = "in", width = 4, height = 5, device='png', bg = "transparent")
